worker_processes <%= worker_processes %>;
error_log stderr <%= log_level %>;
pid logs/nginx.pid;
daemon off;

events {
  worker_connections 1024;
}

http {
  access_log off;
  lua_shared_dict logins 1m;
  lua_shared_dict attrs 1m;
  lua_package_path "<%= lua_package_path %>";
  lua_package_cpath "<%= lua_package_cpath %>";
  server {
    listen <%= listen %>;
    lua_code_cache on;
    location / {
      content_by_lua_block {
        local lualdap = require'lualdap';
        local base64_decode = ngx.decode_base64;
        local base64_encode = ngx.encode_base64;
        local hmac_sha1 = ngx.hmac_sha1;
        local config = require'config';

        local function format_table(tab)
          local str = '{'
          for k,v in pairs(tab) do
              if v then
                  local kt = type(k)
        
                  if kt == 'string' then
                      str = str ..  "  ['" .. k .. "']="
                  elseif kt == 'number' then
                      str = str .. '  [' .. k .. ']='
                  end
        
                  local t = type(v)
                  if(t == "string") then
                      str = str .. '"' .. v .. '",'
                  elseif(t == "number") then
                      str = str .. v .. ','
                  elseif(t == 'table') then
                      str = str .. format_table(v,ind+2) .. ','
                  end
              end
          end
          str = str .. '}'
          return str
        end

        local function add_attrs(username)
          local attr_string = ngx.shared.attrs:get(username)
          if not attr_string then return end
          local f = loadstring('return ' .. base64_decode(attr_string))
          if not f then return end
          local attr = f()
          for k,v in pairs(attr) do
            ngx.header[k] = v
          end
        end
          

        local authorization = ngx.req.get_headers()['authorization'];

        if not authorization then
          ngx.log(ngx.DEBUG,"no authorization header, returning HTTP_UNAUTHORIZED");
          ngx.status = ngx.HTTP_UNAUTHORIZED;
          ngx.header['Content-Type'] = "text/plain";
          ngx.header['WWW-Authenticate'] = 'Basic realm="' .. config.realm .. '"';
          ngx.say("Please authenticate")
          ngx.exit(ngx.HTTP_UNAUTHORIZED);
        end

        local userpassword = base64_decode(authorization:match("Basic%s+(.*)"));
        local username, password = userpassword:match("([^:]*):(.*)")

        local user = ngx.shared.logins:get(username)

        if user and user == base64_encode(hmac_sha1(password,"success")) then
          ngx.log(ngx.DEBUG,"response found in cache, returning");
          add_attrs(username)
          ngx.status = ngx.HTTP_NO_CONTENT;
          ngx.exit(ngx.HTTP_NO_CONTENT)
        end

        local search_conn, err = lualdap.open_simple(
          config.ldap_host,
          config.root_dn,
          config.root_pass);

        if(err) then
          ngx.log(ngx.ERR,"connecting to ldap as the search user failed! please check config.lua");
          ngx.status = ngx.HTTP_FORBIDDEN;
          ngx.exit(ngx.HTTP_FORBIDDEN);
        end

        local result = {}
        local attr
        local filter = config.ldap_filter;
        if(filter) then
            filter = filter:gsub("%%u",username)
            ngx.log(ngx.DEBUG,"filter = " .. filter);
        end

        for dn, attribs in search_conn:search(
          { base = config.ldap_base,
            scope = config.ldap_scope,
            filter = filter}) do
            ngx.log(ngx.DEBUG,"found user: dn = " .. dn);
            table.insert(result,dn)
            attr = attribs
        end

        if(#result ~= 1) then
          ngx.log(ngx.DEBUG,"user not found in ldap, returning HTTP_FORBIDDEN");
          ngx.status = ngx.HTTP_FORBIDDEN;
          ngx.exit(ngx.HTTP_FORBIDDEN);
        end

        local auth_conn, err = lualdap.open_simple(
          config.ldap_host,
          result[1],
          password);

        if(err) then
           ngx.log(ngx.DEBUG,"login for user failed, returning HTTP_FORBIDDEN");
           ngx.status = ngx.HTTP_FORBIDDEN;
           ngx.exit(ngx.HTTP_FORBIDDEN);
         end

        if config.extra_attrs then
          local att = {}
          for _,k in ipairs(config.extra_attrs) do
            att['X-LDAP-' .. string.upper(k)] = attr[k]
          end
          ngx.log(ngx.DEBUG,format_table(att))
          ngx.shared.attrs:set(username,base64_encode(format_table(att)))
        end

        if ngx.shared.logins:set(username,base64_encode(hmac_sha1(password,"success")),config.expire_time) then
          ngx.log(ngx.DEBUG,"login succeeded, returning HTTP_NO_CONTENT")
          add_attrs(username)
          ngx.status = ngx.HTTP_NO_CONTENT;
          ngx.exit(ngx.HTTP_NO_CONTENT)
        end

        ngx.log(ngx.ERR,"saving LDAP response to cache failed, returning HTTP_FORBIDDEN");
        ngx.status = ngx.HTTP_FORBIDDEN;
        ngx.exit(ngx.HTTP_FORBIDDEN);
      }
    }
  }
}
           
